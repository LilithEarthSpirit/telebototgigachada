import dotenv from 'dotenv'
import TelegramBot from 'node-telegram-bot-api'
import { LevelController, TaskController } from './controllers/index.mjs'
import { getRandom, translateWords } from './utils/dictionary.mjs'

dotenv.config()

const bot = new TelegramBot(process.env.TOKEN, { polling: true })
const topics = ['–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–ü—Ä–∏—Ä–æ–¥–∞', '–ì–æ—Ä–æ–¥']
const directions = [
  { label: '–û–±—â–µ–µ', value: 'common' },
  { label: '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞', value: 'grammar' },
]

bot.onText(/\/start/, async (ctx) => {
  bot.sendMessage(
    ctx.chat.id,
    `–ü—Ä–∏–≤–µ—Ç, ${ctx.chat.first_name}, –º–µ–Ω—è –∑–æ–≤—É—Ç EngliPal, –¥–∞–≤–∞–π –≤–º–µ—Å—Ç–µ –∏–∑—É—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫`,
    {
      reply_markup: {
        keyboard: [
          [{ text: '–°–ª–æ–≤–∞—Ä—åüìñ' }, { text: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∏–Ω–∏–º—É–ºüß†' }],
          [{ text: '–¢–µ—Å—Ç—ãüìù' }, { text: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏üìö' }],
        ],
        resize_keyboard: true,
        remove_keyboard: true,
      },
    }
  )
})

bot.onText(/–°–ª–æ–≤–∞—Ä—å/, (msg) => {
  const msgId = msg.from.id
  bot.sendMessage(msgId, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç\n—Å—Ç–æ–ø –∫–æ–º–º–∞–Ω–¥ - /stop')
  let isStopped = false
  const messageListener = async (msg) => {
    if (msg.text === '/stop' || isStopped) {
      isStopped = true
      bot.removeListener('message', messageListener)
    } else {
      const lang = /[wa-z]+/.test(msg.text) ? 'en|ru' : 'ru|en'
      const translate = await translateWords(msg.text, lang)
      bot.sendMessage(
        msgId,
        `${lang === 'en|ru' ? 'üá¨üáß' : 'üá∑üá∫'}${translate.source} - ${
          lang === 'en|ru' ? 'üá∑üá∫' : 'üá¨üáß'
        }${translate.target}`
      )
    }
  }
  bot.on('message', messageListener)
})

bot.onText(/–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∏–Ω–∏–º—É–º/, async (text) => {
  const msgId = text.from.id
  bot.sendMessage(msgId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:', {
    reply_markup: {
      keyboard: [
        ...topics.map((topic) => [{ text: topic }]),
        [{ text: '–ù–∞–∑–∞–¥' }],
      ],
      resize_keyboard: true,
    },
  })
})

let selectedTopic = null

bot.on('message', async (msg) => {
  const clientId = msg.from.id
  const textClient = msg?.text

  if (textClient === '–ù–∞–∑–∞–¥') {
    selectedTopic = null
    bot.sendMessage(clientId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      reply_markup: {
        keyboard: [
          [{ text: '–°–ª–æ–≤–∞—Ä—åüìñ' }, { text: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–∏–Ω–∏–º—É–ºüß†' }],
          [{ text: '–¢–µ—Å—Ç—ãüìù' }, { text: '–ò—Å—Ç–æ—á–Ω–∏–∫–∏üìö' }],
        ],
        resize_keyboard: true,
      },
    })
  } else if (topics.includes(textClient)) {
    selectedTopic = textClient
    const translates = await getRandom(selectedTopic)
    const output = translates.reduce((acc, translate) => {
      acc += `*${translate.source.replace(
        /([\[\]\\])/g,
        '\\$1'
      )}* - *${translate.target.replace(/([\[\]\\])/g, '\\$1')}*\n`
      return acc
    }, '')
    await bot.sendMessage(
      clientId,
      `–í–∞–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –ø–æ —Ç–µ–º–µ "${selectedTopic}", –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é. –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞.`,
      { parse_mode: 'Markdown' }
    )
    bot.sendMessage(clientId, output, { parse_mode: 'Markdown' })
    selectedTopic = null
  }
})

bot.onText(/–¢–µ—Å—Ç—ã/, async (text) => {
  const msgId = text.from.id

  bot.sendMessage(msgId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', {
    reply_markup: {
      keyboard: [[directions[0].label, directions[1].label]],
      resize_keyboard: true,
    },
  })
})

bot.onText(/–ò—Å—Ç–æ—á–Ω–∏–∫–∏/, async (text) => {
  const msgId = text.from.id
  bot.sendMessage(msgId, '–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫:', {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞',
            url: 'https://www.bistroenglish.com/',
          },
          { text: '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞', url: 'https://www.native-english.ru/grammar' },
        ],
        [
          {
            text: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —á—Ç–µ–Ω–∏—è',
            url: 'https://nsportal.ru/shkola/inostrannye-yazyki/angliiskiy-yazyk/library/2017/12/01/pravila-chteniya-angliyskogo-yazyka',
          },
          {
            text: '–ò–∑—É—á–µ–Ω–∏–µ —Å–ª–æ–≤',
            url: 'https://online-london.com/blog/lexis/1000-slov-angliyskogo-yazyka/',
          },
        ],
      ],
    },
  })
})

const goToNextTask = async (
  chatId,
  { levelName, offset, rightLength, type }
) => {
  const task = await TaskController.getOneWithButtons(
    levelName,
    offset,
    rightLength,
    type
  )
  bot.sendMessage(chatId, `–í–æ–ø—Ä–æ—Å #${offset + 1}. ${task.question}`, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: task.buttons,
    },
  })
  return task
}

let selectedDirection = null
bot.on('message', async (msg) => {
  const clientId = msg.from.id
  const textClient = msg?.text
  const titles = await LevelController.getTitles()

  if (
    textClient === directions[0].label ||
    textClient === directions[1].label
  ) {
    selectedDirection = directions.find(
      (direction) => direction.label === textClient
    ).value
    bot.sendMessage(clientId, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å', {
      reply_markup: {
        keyboard: [titles],
        resize_keyboard: true,
      },
    })
  } else if (titles.includes(textClient)) {
    await goToNextTask(clientId, {
      levelName: textClient,
      offset: 0,
      rightLength: 0,
      type: selectedDirection,
    })
    selectedDirection = null
  }
})

bot.on('callback_query', async (query) => {
  const chatId = query.from.id

  const { size, offset, qa } = JSON.parse(query.data)
  let { rightLength } = JSON.parse(query.data)
  const [userAnswer, rightAnswer, levelName, type] = qa.split('_')
  const isRight = userAnswer === rightAnswer
  bot.editMessageReplyMarkup(
    {
      inline_keyboard: [
        [
          {
            text: isRight ? '–í–µ—Ä–Ω–æ ‚úÖ' : '–ù–µ–≤–µ—Ä–Ω–æ ‚ùå',
            callback_data: 'noop',
          },
        ],
      ],
    },
    { chat_id: chatId, message_id: query.message.message_id }
  )
  rightLength = isRight ? rightLength + 1 : rightLength
  if (+offset + 1 === +size) {
    await bot.answerCallbackQuery(query.id, {
      text: `–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: ${rightLength} –∏–∑ ${size}`,
      show_alert: true,
    })
  } else {
    await goToNextTask(chatId, {
      levelName,
      type,
      offset: offset + 1,
      rightLength: rightLength,
    })
  }
})
